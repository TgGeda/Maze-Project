# Maze Game MVP
  (A 3D Game created using SDL2)
 ## Minimum Viable Product (MVP) for the Maze Game with SDL2:
This is a Maze Game Minimum Viable Product (MVP) that utilizes SDL2 and raycasting to create a maze-like environment. The game allows the player to navigate through the maze, rotate the camera, and interact with various game elements. The MVP consists of several tasks, each building upon the previous one.

## Task 0: Walls!

- Create a window using SDL2.
- Implement raycasting to draw walls on the window.
- The walls should have a different color from the ground/ceiling.
- The map can be modified within the code (e.g., using an array of arrays of integers or characters).
### NB
Create a 2D array to represent the maze and draw walls using the SDL2 graphics library. The walls should be represented by rectangles or lines.
Define a 2D array to store the maze data.Utilize the SDL2 graphics library to render rectangles or lines and draw walls.

## Task 1: Orientation

- Draw walls facing NORTH and SOUTH in a different color from walls facing EAST and WEST.
### NB
Use the arrow keys to control the movement and rotation of the player in the maze. Implement a function to handle user input using SDL_Event and update the player's position and orientation accordingly.

## Task 2: Rotation

- Implement the ability to rotate the camera during the game.
- Rotation can be triggered by pressing the left or right arrow keys or by moving the mouse.

## Task 3: Move

- Provide the player with the ability to move the camera during the game.
- Movement can be triggered by pressing the w, a, s, or d keys on the keyboard.
### NB
Implement basic movement logic for the player. Enable the player to move forward, backward, left, and right within the maze.
Create a function to update the player's position according to the current orientation and user input received.

## Task 4: Ouch!

- Handle collisions between the player and the walls.
- The player should not be able to enter walls.
- Implement sliding on walls instead of stopping the player.
### NB

Implement collision detection between the player and the walls to prevent the player from moving through them. Create a function to check for collisions between the player and the walls. If a collision occurs, halt the player's movement.

## Task 5: Parser

- Implement a parser to read the map from a file.
- Define the standards for the map, such as the character for a wall and the character for empty space.
- The program should accept a map file path as a parameter.
### NB
Create a basic parser to read maze data from a text file and save it in a 2D array.Develop a function to read maze data from a text file.
Save the maze data in the 2D array.

## Task 6: Draw the map

- Draw the map on the game window.
- Provide the option to enable or disable the map display during the game.
- Include the player's line of sight in the map.
### NB
Draw the maze by utilizing the maze data saved in the 2D array. Employ distinct colors for the walls and ground/ceiling to ensure visual clarity.
Utilize the maze data from the 2D array to create a visual representation of the maze.Differentiate the walls and ground/ceiling by employing contrasting colors.

## Task 7: Coding style + Documentation

- Ensure that the code follows the Holberton School coding style.
- Document the code following the Holberton School documentation format.

## Task 8: Textures

- Add textures to the walls.
- Enhance the visual appearance of the maze.
### NB
Add textures to the walls with SDL2's texture rendering functions.Create a function to load wall textures.Utilize SDL2's texture rendering functions to display textures on the walls.

## Task 9: Multi task!

- Handle multiple events simultaneously.
- Implement movement in multiple directions while rotating.
- Handle conflicting movement inputs appropriately.

## Task 10: Ground textures

- Add textures to the ground and/or ceiling.
- Enhance the visual appearance of the game environment.

## Task 11: Weapons

- Add weapon textures to the game.
- Allow the player to interact with weapons.

## Task 12: Enemies

- Introduce enemies into the game.
- Implement enemy behavior and interactions with the player.

## Task 13: Make it rain

- Add rain effects to the game.
- Provide the ability to start or stop the rain using a key.

## Task 14: Extra option

- Implement additional features such as shadows, special lighting effects, etc.
- Encourage creativity and enhance the overall gaming experience.

# Data Modeling

## USER STORY

End users want to play a maze game using SDL2. They seek enjoyment in solving the maze and challenging themselves to improve their speed and accuracy.

At the start of the game, they want a main menu that offers options to begin a new game, load a saved game, or quit. If they choose to start a new game, they desire the ability to select the difficulty level of the maze, including its size and the number of obstacles.

Once the game commences, they expect to see a maze displayed on the screen. They want to control a character within the maze using the arrow keys on their keyboard. The character's movements should be smooth and quick, without any lag or delay. Additionally, they wish to have a timer that counts down the remaining time to complete the maze. A score reflecting their progress through the maze should also be visible.

While navigating the maze, they want the opportunity to collect coins or other rewards that will increase their score. They also anticipate encountering obstacles that will impede their progress or make it more challenging to reach the end of the maze.

Upon reaching the end of the maze, they desire a congratulatory message that displays their final score and the time it took to complete the maze. They also want the option to save their game for future play.

Throughout the game, they expect to hear sound effects corresponding to their actions, such as collecting coins or encountering an obstacle. Additionally, they want to hear music that enhances the excitement and challenge of the game.

Lastly, they want the game to have visually appealing graphics and animations that make it enjoyable to play and keep them engaged throughout the entire experience.